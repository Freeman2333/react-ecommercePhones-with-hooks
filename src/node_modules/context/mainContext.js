import React, { createContext, useReducer,useEffect  } from 'react'
import phones_reducer from '../reducers/phones_reducer'
import {
  FETCH_PHONES_SUCCESS,
  FETCH_PHONES_FAILURE,
  LOAD_MORE_PHONES_SUCCESS,
  LOAD_MORE_PHONES_FAILURE,
  FETCH_CATEGORIES_FAILURE,
  FETCH_CATEGORIES_SUCCESS,
  SET_ACTIVE_CATEGORY_ID,
  SET_FILTERED_PHONES,
  UPDATE_SEARCH,

} from 'actionTypes'

import {
  fetchPhones as fetchPhonesApi,
  loadMorePhones as loadMorePhonesApi,
  // fetchPhoneById as fetchPhoneByIdApi,
  fetchCategories as fetchCategoriesApi
} from 'api'

const initialState = {
  phones: [],
  activeCategoryId: 'all'
}
export const MainContext = createContext()

const MainProvider = ({ children }) => {
  const [state, dispatch] = useReducer(phones_reducer, initialState);
  const fetchPhones = async() => {
    try {
      let phones = await fetchPhonesApi()
      dispatch({
        type: FETCH_PHONES_SUCCESS,
        payload: phones
      })
    } catch (err) {
      dispatch({
        type: FETCH_PHONES_FAILURE,
        payload: err,
        error: true
      })
    }
  }

  const renderPhones = () => {
    let filteredPhones = []
    if (state.activeCategoryId !== 'all') {
      filteredPhones = state.phones.filter(phone => {
        // console.log(state.activeCategoryId, phone.categoryId);
        return phone.categoryId === state.activeCategoryId
      })
    } else {
      filteredPhones = state.phones

    if (state.search) {
      filteredPhones = state.phones.filter(phone => {
      return phone.name.toLowerCase().startsWith(state.search)
      })
    }
    }
    dispatch({
      type: SET_FILTERED_PHONES,
      payload: filteredPhones
    })
  }

  const loadMorePhones = async () => {
    try {
      const phones = await loadMorePhonesApi()
      dispatch({
        type: LOAD_MORE_PHONES_SUCCESS,
        payload: phones
      })
    } catch (err) {
      dispatch({
        type: LOAD_MORE_PHONES_FAILURE,
        payload: err,
        error: true
      })
    }
  }

  const fetchCategories = async () => {
    try {
      const categories = await fetchCategoriesApi()
      dispatch({
        type: FETCH_CATEGORIES_SUCCESS,
        payload: categories
      })
    } catch (err) {
      dispatch({
        type: FETCH_CATEGORIES_FAILURE,
        payload: err,
        error: true
      })
    }
  }

  const setActiveGategoryId = (id) => {
    dispatch({
      type: SET_ACTIVE_CATEGORY_ID,
      payload: id
    })
  }

  const updateSearch = (searchText) => {
    dispatch({
      type: UPDATE_SEARCH,
      payload: searchText
    })
  }

  useEffect(() => { 
    renderPhones()
  }, [state.phones, state.activeCategoryId, state.search]);

  useEffect(() => {
    fetchPhones()
		fetchCategories()
  }, []);

  return (
    <MainContext.Provider value={{...state,fetchPhones,loadMorePhones,fetchCategories,setActiveGategoryId,renderPhones,updateSearch}}>
      {children}
    </MainContext.Provider>
  )
}

export default MainProvider
